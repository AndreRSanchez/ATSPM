@model MOE.Common.Models.Signal
@using (Ajax.BeginForm("Edit", "Signals", new AjaxOptions { InsertionMode = System.Web.Mvc.Ajax.InsertionMode.Replace, UpdateTargetId = "ActionMessage", HttpMethod = "POST" }))
{

    @Html.AntiForgeryToken()
    <div class="panel panel-signal">
        <div class="panel-heading">
            
            <h4>
                @*<a class="pull-right btn btn-danger" href="javascript:DeleteSignal(@Model.SignalID)">Delete &nbsp;<span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a>*@
                <a class="pull-right btn btn-danger" href="javascript:DeleteSignal()">Delete This Signal &nbsp;<span class="glyphicon glyphicon-paste" aria-hidden="true"></span></a>
                <a class="pull-right btn btn-default" href="javascript:CopySignal()">Copy &nbsp;<span class="glyphicon glyphicon-paste" aria-hidden="true"></span></a>
                Signal @Model.SignalID
                <button type="submit" class="pull-right btn btn-primary"  onclick="javascript:UpdateVersionDropdown()" value="Save">Save &nbsp;<span class="glyphicon glyphicon-save" aria-hidden="true"></span></button>

                <span class="pull-right" id="ActionMessage"></span>
            </h4>
        </div>

        <div class="panel-body">
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.SignalID, new { @id = "editSignalID" })
                @Html.HiddenFor(model => model.VersionID, new { @versionId = "editVersionID" })
        
               

                <div class="form-group-configuration-tool  form-group col-md-6">
                    @Html.LabelFor(model => model.VersionID, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownList("versionDropDown", new SelectList(Model.VersionList, "VersionId", "SelectListName", Model.VersionID), new {id = "versionDropDown", @class = "form-control", @onchange = "LoadVersionByVersionID(this.value)" })
                        @Html.ValidationMessageFor(model => model.VersionID, "", new { id = "Version-error", @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group-configuration-tool  form-group col-md-2">
                    @Html.Label("Add New Version")
                    <span onclick="AddNewVersion()" class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
                </div>
                
                <div class="form-group-configuration-tool  form-group col-md-2">
                    @Html.Label("Delete This Version")
                    <span onclick="DeleteVersion()" class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
                </div>
                
                <div class="form-group-configuration-tool  form-group col-md-4">
                    @Html.LabelFor(model => model.Start, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Start, new { htmlAttributes = new { @class = "form-control datepicker" } })
                        @Html.ValidationMessageFor(model => model.Start, "", new { id = "Start-error", @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group-configuration-tool  form-group col-md-4">
                    @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Note, "", new { id = "Note-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-configuration-tool  form-group col-md-3">
                    @Html.LabelFor(model => model.PrimaryName, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.PrimaryName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PrimaryName, "", new { id = "PrimaryName-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-configuration-tool  form-group col-md-3">
                    @Html.LabelFor(model => model.SecondaryName, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.SecondaryName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SecondaryName, "", new { id = "SecondaryName-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-configuration-tool  form-group col-md-2">
                    @Html.LabelFor(model => model.IPAddress, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.IPAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IPAddress, "", new { id = "IPAddress-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-configuration-tool  form-group col-md-2">
                    @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Latitude, "", new { id = "Latitude-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-configuration-tool  form-group col-md-2">
                    @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Longitude, "", new { id = "Longitude-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-configuration-tool  form-group col-md-2">
                    @Html.LabelFor(model => model.RegionID, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.RegionID, (SelectList)ViewBag.Region, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Region, "", new { id = "Region-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-configuration-tool  form-group col-md-3">
                    @Html.LabelFor(model => model.ControllerTypeID, "Controller Type", htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.ControllerTypeID, (SelectList)ViewBag.ControllerType, new { @class = "form-control" })
                        
                        @Html.ValidationMessageFor(model => model.ControllerTypeID, "", new { id = "ControllerTypeID-error", @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-1">
                    @Html.LabelFor(model => model.Enabled, htmlAttributes: new { @class = "control-label" })
                    <div class="center-block">
                        @Html.EditorFor(model => model.Enabled, new { @class = "control-label" })
                    </div>

                </div>
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label" })
                    <span onclick="GetCreateComment()" class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
                    <div id="NewComment"></div>
                    <div class="comments">
                        <div id="AddedComment"></div>
                        @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Comments, "", new { id = "Comments-error", @class = "text-danger" })
                    </div>
                </div>
                <div id="ConfigurationTable" role="tablist" aria-multiselectable="true" class="col-md-12">
                    <div class="panel panel-configuration-table">
                        <div class="panel-heading" role="tab" id="ConfigurationTableHeading">
                            <h5 class="panel-title">
                                <a id="ConfigurationTableHeader" data-toggle="collapse" data-parent="#ConfigurationTable" href="#ConfigurationTableCollapse" aria-expanded="false" aria-controls="ConfigurationTableCollapse">
                                    Configuration Table
                                </a>

                            </h5>
                        </div>
                        <div id="ConfigurationTableCollapse" class="panel-collapse collapse panel-body" role="tabpanel">
                        </div>
                    </div>
                </div>
                <div id="ApproachesList" class="center-block col-md-12">
                    @Html.LabelFor(model => model.Approaches, htmlAttributes: new { @class = "control-label" })
                    <span onclick="CreateNewApproach()" class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
                    @Html.EditorFor(model => model.Approaches)
                </div>

                
            </div>
        </div>
        </div>
}
